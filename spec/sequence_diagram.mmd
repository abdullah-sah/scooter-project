sequenceDiagram
	participant U as User
	participant App as ScooterApp
	participant S as Scooter
	participant C as Console

	rect rgba(0, 0, 255, 0.2)
		note left of U: Registering

		U ->>+ App: register(user)
		Note over App: registedUsers.includes(user)
		rect rgba(0, 255, 0, 0.2)
			alt user has account
				App -->> C: Already registered, please sign in!
			else user is 17 or younger
				App -->> C: too young to register
			else all checks passed
				activate App
				note over App: registeredUsers[username] = password, age, loggedIn, accountChange
				App -->> C: User has been registered
				deactivate App
			end
		end
		deactivate App
	end

	rect rgba(255, 255, 0, 0.4)
		note left of U: Logging in
		U ->> App: logIn(username, password)
		rect rgba(255, 20, 100, 0.2)
			alt if username is in registeredUsers
				note right of App: registeredUser[username].loggedIn = true
				App ->> C: Logged in successfully mon ami!
			else username not in registeredUsers or password incorrect
				App ->> C: Username or password is incorrect
			end
		end
		

	end

	rect rgba(0, 255, 0, 0.2)
	note left of U: Renting a scooter
		U ->>+ S: rent()
		rect rgba(0, 100, 100, 0.2)
			alt !isBroken && charge > 20
				S ->> C: Enjoy the ride!
			else charge <= 20
				S ->> C: Scooter low on battery, please charge.
			else isBroken
				S ->> C: Scooter is broken, please send a repair request.
			end
		end
	end

	rect rgba(255, 0, 0, 0.2)
	note left of U: Docking a scooter
		U ->> S: dock(station)
		rect rgba(255, 0, 20, 0.3)
			alt no argument passed
				S ->> C: Docking station required!
			else station passed in correctly
				S ->> C: Docked = true && user = emptyString
			end
		end
	end



	%% Go back to Project Specs on codingrooms to see bonus task
	rect rgba(210, 10, 255, 0.2)
	note left of U: Removing a scooter
		U ->> App: removeScooter(scooterToRemove)
		App ->> C: scooter ${scooterToRemove.serial} has been removed.
	end